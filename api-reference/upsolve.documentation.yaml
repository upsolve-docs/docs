openapi: 3.1.0
info:
  title: Upsolve API
  version: 1.0.0
paths:
  /v1/health:
    get:
      operationId: GetV1Health
      responses:
        "200":
          description: GET /v1/health Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      ok:
                        type: boolean
                    required:
                      - ok
                required:
                  - status
                  - data
        "400":
          description: GET /v1/health Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
  /v1/api/tenant/register-tenant:
    post:
      operationId: PostV1ApiTenantRegisterTenant
      responses:
        "200":
          description: POST /v1/api/tenant/register-tenant Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Result of the API returned as a message.
                        examples:
                          - Tenant Google Inc registered.
                      token:
                        type: string
                        description: A JWT identifying this tenant
                        examples:
                          - eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7InBhcmVudE9yZ0lkIjoiYWJkZTZmMjQtYWYwZi00Zjg3LWI4NzEtNzk0NGIyYzhjM2IzIiwiZGlzcGxheU5hbWUiOiJEZW1vIChBZG1pbikiLCJwYXlsb2FkIjp7fX0sImlhdCI6MTcwOTI2NTcyOSwiZXhwIjoxNzA5MjY5MzI5fQ.nfMwGbPe7zwCwlky079PVjA-ox0G2OtTuFo_0MXoLCE
                    required:
                      - message
                      - token
                    examples:
                      - message: Tenant Google Inc registered.
                        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7InBhcmVudE9yZ0lkIjoiYWJkZTZmMjQtYWYwZi00Zjg3LWI4NzEtNzk0NGIyYzhjM2IzIiwiZGlzcGxheU5hbWUiOiJEZW1vIChBZG1pbikiLCJwYXlsb2FkIjp7fX0sImlhdCI6MTcwOTI2NTcyOSwiZXhwIjoxNzA5MjY5MzI5fQ.nfMwGbPe7zwCwlky079PVjA-ox0G2OtTuFo_0MXoLCE
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      message: Tenant Google Inc registered.
                      token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7InBhcmVudE9yZ0lkIjoiYWJkZTZmMjQtYWYwZi00Zjg3LWI4NzEtNzk0NGIyYzhjM2IzIiwiZGlzcGxheU5hbWUiOiJEZW1vIChBZG1pbikiLCJwYXlsb2FkIjp7fX0sImlhdCI6MTcwOTI2NTcyOSwiZXhwIjoxNzA5MjY5MzI5fQ.nfMwGbPe7zwCwlky079PVjA-ox0G2OtTuFo_0MXoLCE
        "400":
          description: POST /v1/api/tenant/register-tenant Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description:
        Use this endpoint to securely register a tenant to Upsolve and pass
        metadata relating to the tenant. This metadata payload will be used to
        secure data when the user accesses an Upsolve dashboard.
      summary: Register tenant to Upsolve
      requestBody:
        description: POST /v1/api/tenant/register-tenant Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                  minLength: 1
                  description: Upsolve API key, generated in the Deploy tab of the Upsolve Hub.
                  examples:
                    - up_embed_************
                orgId:
                  type: string
                  description:
                    "[Optional] The ID of the org the API key is being used with. Only
                    needed if the API key is being used for an organization
                    other than the org that generated it."
                  examples:
                    - do-not-use
                displayName:
                  type: string
                  description: Display name for this user. This will appear in the Upsolve Hub.
                  examples:
                    - Google Inc
                key:
                  type: string
                  minLength: 1
                  description:
                    Unique key to identify this tenant. Ideally something complex like
                    a UUID.
                  examples:
                    - org_1234-abcd-5678-efgh
                prefilters:
                  type: object
                  additionalProperties:
                    type: string
                    description: Value to filter on
                  examples:
                    - company_id: company-google
                      company_class: tech
              required:
                - apiKey
                - displayName
                - key
                - prefilters
      security:
        - APIKEY_1: []
  /v1/api/chart:
    get:
      operationId: GetV1ApiChart
      responses:
        "200":
          description: GET /v1/api/chart Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      charts:
                        type: array
                        items:
                          type: string
                        examples:
                          - - 550e8400-e29b-41d4-a716-446655440000
                            - e29b8400-550e-41d4-a716-446655440000
                    required:
                      - charts
                    examples:
                      - charts:
                          - 550e8400-e29b-41d4-a716-446655440000
                          - e29b8400-550e-41d4-a716-446655440000
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      charts:
                        - 550e8400-e29b-41d4-a716-446655440000
                        - e29b8400-550e-41d4-a716-446655440000
        "400":
          description: GET /v1/api/chart Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description:
        Gets the ids of all charts marked as published by either an org
        admin tenant, or the current tenant.
      summary: Get available published charts
      security:
        - APIKEY_2: []
    delete:
      operationId: DeleteV1ApiChart
      responses:
        "200":
          description: DELETE /v1/api/chart Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - data
        "400":
          description: DELETE /v1/api/chart Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: Completely delete a chart from the charts database.
      summary: Delete a chart forever.
      parameters:
        - name: id
          in: query
          required: true
          description: DELETE /v1/api/chart Parameter
          schema:
            type: string
      security:
        - APIKEY_2: []
  /v1/api/chart/create-chart:
    post:
      operationId: PostV1ApiChartCreateChart
      responses:
        "200":
          description: POST /v1/api/chart/create-chart Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      chartId:
                        type: string
                        description: The newly created chart id
                        examples:
                          - 550e8400-e29b-41d4-a716-446655440000
                    required:
                      - chartId
                    examples:
                      - chartId: 550e8400-e29b-41d4-a716-446655440000
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      chartId: 550e8400-e29b-41d4-a716-446655440000
        "400":
          description: POST /v1/api/chart/create-chart Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description:
        Creates a new blank chart that can be used as a starting point for
        additional operations
      summary: Create a new chart
      requestBody:
        description: POST /v1/api/chart/create-chart Request body
        content:
          application/json:
            schema:
              type: object
      security:
        - APIKEY_2: []
  /v1/api/chart/unpublish-chart:
    post:
      operationId: PostV1ApiChartUnpublishChart
      responses:
        "200":
          description: POST /v1/api/chart/unpublish-chart Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - data
        "400":
          description: POST /v1/api/chart/unpublish-chart Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description:
        Mark a chart as no longer published. It will still be visible in
        the upsolve hub, but will not be returned as part of a GET request
      summary: Mark a chart as no longer published.
      requestBody:
        description: POST /v1/api/chart/unpublish-chart Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                chartId:
                  type: string
              required:
                - chartId
            examples:
              example1:
                value:
                  chartId: 550e8400-e29b-41d4-a716-446655440000
      security:
        - APIKEY_2: []
  /v1/api/ai/ask-dash-sql:
    post:
      operationId: PostV1ApiAiAskDashSql
      responses:
        "200":
          description: POST /v1/api/ai/ask-dash-sql Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      sql:
                        type: string
                    required:
                      - sql
                required:
                  - status
                  - data
        "400":
          description: POST /v1/api/ai/ask-dash-sql Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/api/ai/ask-dash-sql Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                input:
                  type: string
                  description: Text input prompt for query
                  examples:
                    - Filter sales table by date, keep last 7 days only
                connectionId:
                  type: string
                  description:
                    Optional connection ID. If not provided, first created connection
                    will be used
                  examples:
                    - 550e8400-e29b-41d4-a716-446655440000
              required:
                - input
            examples:
              example1:
                value:
                  input: Filter sales table by date, keep last 7 days only
                  connectionId: 550e8400-e29b-41d4-a716-446655440000
      security:
        - APIKEY_2: []
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    APIKEY_1:
      type: apiKey
      in: query
      name: apiKey
      x-in-actual: body
      description: apiKey MUST be supplied within the request body instead of query
    APIKEY_2:
      type: http
      scheme: bearer
      bearerFormat: JWT
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://api.upsolve.ai
